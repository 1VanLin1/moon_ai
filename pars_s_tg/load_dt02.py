# download_bybit_data_SAFE.py
import requests
import pandas as pd
from datetime import datetime
import time
import signal
import sys
import os

SYMBOL = "TONUSDT"
INTERVAL = "1"  # 1 –º–∏–Ω—É—Ç–∞
# INTERVAL = "1"  # 1 —á–∞—Å
INTERVAL_SECONDS = int(INTERVAL) * 60   # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
START_DATE = "2023-01-23"
END_DATE = "2025-10-23"
LIMIT = 200

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
all_klines = []
seen_timestamps = set()
request_count = 0
current_start = 0
filename = ""

def save_progress():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ CSV —Ñ–∞–π–ª"""
    global all_klines, current_start, request_count, filename
    
    if not all_klines:
        print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    try:
        df = pd.DataFrame(all_klines)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df.sort_index(inplace=True)
        df = df[~df.index.duplicated(keep='first')]  # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –¥—É–±–ª–µ–π

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        total_expected = 0
        total_actual = len(df)
        gaps = 0
        if len(df) > 1:
            total_expected = int((df.index[-1] - df.index[0]).total_seconds() / INTERVAL_SECONDS) + 1
            gaps = total_expected - total_actual

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            filename = f"data/bybit_{SYMBOL.lower()}_{INTERVAL}_{START_DATE.replace('-', '')}_{END_DATE.replace('-', '')}_PARTIAL.csv"

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('data', exist_ok=True)
        
        df.to_csv(filename)
        
        print(f"\nüíæ –ü–†–û–ì–†–ï–°–° –°–û–•–†–ê–ù–ï–ù: {total_actual} —Å–≤–µ—á–µ–π –≤ {filename}")
        if len(df) > 1:
            print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: {df.index[0]} ‚Äî {df.index[-1]}")
            print(f"üìä –û–∂–∏–¥–∞–ª–æ—Å—å: {total_expected} –º–∏–Ω—É—Ç")
            print(f"üìâ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {gaps} –º–∏–Ω—É—Ç ({gaps/total_expected:.2%})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Ç–æ—á–∫—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        resume_info = {
            'last_timestamp': current_start,
            'total_records': len(all_klines),
            'last_request': request_count
        }
        resume_file = filename.replace('.csv', '_resume.json')
        pd.Series(resume_info).to_json(resume_file)
        print(f"üìã –¢–æ—á–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {resume_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)"""
    print(f"\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
    save_progress()
    print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    sys.exit(0)

def load_resume_info():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    global all_klines, seen_timestamps, request_count, current_start
    
    resume_file = f"data/bybit_{SYMBOL.lower()}_{INTERVAL}_{START_DATE.replace('-', '')}_{END_DATE.replace('-', '')}_PARTIAL_resume.json"
    if os.path.exists(resume_file):
        try:
            resume_data = pd.read_json(resume_file, typ='series')
            print(f"üîÑ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {resume_file}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π timestamp: {resume_data['last_timestamp']}")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {resume_data['total_records']}")
            print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {resume_data['last_request']}")
            
            choice = input("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–π —Ç–æ—á–∫–∏? (y/n): ").strip().lower()
            if choice == 'y':
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                existing_file = f"data/bybit_{SYMBOL.lower()}_{INTERVAL}_{START_DATE.replace('-', '')}_{END_DATE.replace('-', '')}_PARTIAL.csv"
                if os.path.exists(existing_file):
                    try:
                        existing_df = pd.read_csv(existing_file, index_col='timestamp', parse_dates=True)
                        for idx, row in existing_df.iterrows():
                            ts = int(idx.timestamp() * 1000)
                            all_klines.append({
                                "timestamp": ts,
                                "open": row['open'],
                                "high": row['high'],
                                "low": row['low'],
                                "close": row['close'],
                                "volume": row['volume'],
                            })
                            seen_timestamps.add(ts)
                        request_count = resume_data['last_request']
                        current_start = resume_data['last_timestamp']
                        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_klines)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
                        return current_start, len(all_klines), request_count
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                else:
                    current_start = resume_data['last_timestamp']
                    request_count = resume_data['last_request']
                    return current_start, resume_data['total_records'], request_count
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    return None, 0, 0

def date_to_timestamp(date_str):
    dt = datetime.strptime(date_str, "%Y-%m-%d")
    return int(dt.timestamp() * 1000)

def make_api_request(url, params, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            response = requests.get(url, params=params, timeout=15)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            if response.status_code != 200:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {response.text[:100]}")
                time.sleep(2)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not response.text.strip():
                print(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                time.sleep(2)
                continue
                
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                data = response.json()
                return data
            except ValueError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")
                time.sleep(2)
                continue
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
            time.sleep(3)
        except requests.exceptions.ConnectionError:
            print(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
            time.sleep(5)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            time.sleep(2)
    
    return None

def main():
    global all_klines, seen_timestamps, request_count, current_start, filename
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)

    start_ts = date_to_timestamp(START_DATE)
    end_ts = date_to_timestamp(END_DATE)

    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {INTERVAL}-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π {SYMBOL} —Å {START_DATE} –ø–æ {END_DATE}...")
    print(f"‚è±Ô∏è –¶–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_ts} ‚Äî {end_ts} (–º—Å)")

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    resume_ts, resume_records, resume_requests = load_resume_info()
    if resume_ts:
        current_start = resume_ts
        print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å timestamp: {current_start}")
    else:
        current_start = start_ts
        print("üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")

    base_url = "https://api.bybit.com"
    endpoint = "/v5/market/kline"

    MAX_REQUESTS = 10000  # üõ°Ô∏è –ñ—ë—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ —É–π—Ç–∏ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å

    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N –∑–∞–ø—Ä–æ—Å–æ–≤
    AUTOSAVE_INTERVAL = 50
    last_save_count = 0

    try:
        while current_start < end_ts and request_count < MAX_REQUESTS:
            params = {
                "category": "linear",
                "symbol": SYMBOL,
                "interval": INTERVAL,
                "start": current_start,
                "limit": LIMIT,
            }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            data = make_api_request(base_url + endpoint, params)
            
            if data is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                current_start += 60 * 1000  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 1 –º–∏–Ω—É—Ç—É
                continue

            if data.get("retCode") != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('retMsg')}")
                time.sleep(1)
                continue  # –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑

            klines = data["result"]["list"]
            if not klines:
                print("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
                break

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            klines.sort(key=lambda x: int(x[0]))

            new_klines = 0
            last_ts_in_batch = 0
            for k in klines:
                ts = int(k[0])
                last_ts_in_batch = max(last_ts_in_batch, ts)
                if ts < current_start:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—á–∏ –î–û —Ç–µ–∫—É—â–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                if ts in seen_timestamps:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏
                if ts >= end_ts:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—á–∏ –ü–û–°–õ–ï –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞

                seen_timestamps.add(ts)
                all_klines.append({
                    "timestamp": ts,
                    "open": float(k[1]),
                    "high": float(k[2]),
                    "low": float(k[3]),
                    "close": float(k[4]),
                    "volume": float(k[5]),
                })
                new_klines += 1

            # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º current_start –Ω–∞ –æ—Å–Ω–æ–≤–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û timestamp –≤ –±–∞—Ç—á–µ
            if last_ts_in_batch >= current_start:
                current_start = last_ts_in_batch + 1
            else:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: last_ts_in_batch ({last_ts_in_batch}) < current_start ({current_start})")
                current_start += 60 * 1000  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 1 –º–∏–Ω—É—Ç—É –≤–ø–µ—Ä—ë–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è

            request_count += 1
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {request_count}: +{new_klines} —Å–≤–µ—á–µ–π, –≤—Å–µ–≥–æ: {len(all_klines)}, next_start: {current_start}")

            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N –∑–∞–ø—Ä–æ—Å–æ–≤
            if request_count - last_save_count >= AUTOSAVE_INTERVAL:
                print("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
                save_progress()
                last_save_count = request_count

            if new_klines == 0:
                print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –≤ –±–∞—Ç—á–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 1 –º–∏–Ω—É—Ç—É")
                current_start += 60 * 1000

            time.sleep(0.2)  # —É–≤–∞–∂–∞–µ–º rate limit

        if request_count >= MAX_REQUESTS:
            print(f"üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({MAX_REQUESTS}) ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ. –ü—Ä–µ—Ä—ã–≤–∞–µ–º.")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if all_klines:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ _PARTIAL –≤ –∏–º–µ–Ω–∏
            final_filename = f"data/bybit_{SYMBOL.lower()}_{INTERVAL}_{START_DATE.replace('-', '')}_{END_DATE.replace('-', '')}.csv"
            
            df = pd.DataFrame(all_klines)
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            df.sort_index(inplace=True)
            df = df[~df.index.duplicated(keep='first')]  # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –¥—É–±–ª–µ–π

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            total_expected = 0
            total_actual = len(df)
            gaps = 0
            if len(df) > 1:
                total_expected = int((df.index[-1] - df.index[0]).total_seconds() / INTERVAL_SECONDS) + 1
                gaps = total_expected - total_actual

            df.to_csv(final_filename)

            print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï: {total_actual} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ {final_filename}")
            if len(df) > 1:
                print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: {df.index[0]} ‚Äî {df.index[-1]}")
                print(f"üìä –û–∂–∏–¥–∞–ª–æ—Å—å: {total_expected} –º–∏–Ω—É—Ç")
                print(f"üìâ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {gaps} –º–∏–Ω—É—Ç ({gaps/total_expected:.2%})")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if filename and os.path.exists(filename):
                os.remove(filename)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")
            resume_file = filename.replace('.csv', '_resume.json') if filename else ""
            if resume_file and os.path.exists(resume_file):
                os.remove(resume_file)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {resume_file}")
                
            if len(all_klines) > 1_100_000:
                print(f"üö® –í–ù–ò–ú–ê–ù–ò–ï: –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ 1.1M ‚Äî –ø—Ä–æ–≤–µ—Ä—å, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∏–∫–µ!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        print("üíæ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å...")
        save_progress()

if __name__ == "__main__":
    main()